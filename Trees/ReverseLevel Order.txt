package target;

import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;

    TreeNode(int val) {
        this.val = val;
        this.left = this.right = null;
    }
}

public class ReverseLevelOrder {

    private void reverseLevelOrder(TreeNode root) {

        if (root == null) return;

        Queue<TreeNode> q = new LinkedList<>();
        Stack<TreeNode> s = new Stack<>();

        q.add(root);

        while (!q.isEmpty()) {
            TreeNode curr = q.poll();

            s.push(curr); // Corrected to push the node itself

            // Enqueue right first, then left
            if (curr.right != null) q.add(curr.right);
            if (curr.left != null) q.add(curr.left);
        }

        // Pop from stack to print values in reverse order
        while (!s.isEmpty()) {
            System.out.print(s.pop().val + " ");
        }
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        root.left = new TreeNode(2);
        root.right = new TreeNode(3);
        root.left.left = new TreeNode(4);
        root.left.right = new TreeNode(5);
        root.right.left = new TreeNode(6);
        root.right.right = new TreeNode(7);

        ReverseLevelOrder solution = new ReverseLevelOrder();
        System.out.print("Reverse Level Order Traversal: ");
        solution.reverseLevelOrder(root);
    }
}
